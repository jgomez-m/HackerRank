package differencepairs;import java.io.IOException;import java.util.Arrays;import java.util.HashSet;import java.util.Scanner;import java.util.Set;import java.util.stream.Collectors;public class Solution {    // Complete the pairs function below.    static int pairs(int k, int[] arr) {        if (arr.length < 2) return 0;        Arrays.sort(arr);        //Arrays.stream(arr).forEach(System.out::print);        int j = arr.length-1;        int i = j-1;        int result = 0;        while(j>0) {            while(i>=0){                if(arr[j] - arr[i] == k){                    result++;                    j--;                }                i--;            }            j--;        }        return result;    }    static int optimizePairs(int k, int[] arr) {        Set<Integer> numbers = new HashSet<Integer>(Arrays.stream(arr).boxed().collect(Collectors.toList()));        long matchCount = numbers.stream()                .filter(i -> numbers.contains(i - k))                .count();        return (int) matchCount;    }    private static final Scanner scanner = new Scanner(System.in);    public static void main(String[] args) throws IOException {        String[] nk = scanner.nextLine().split(" ");        int n = Integer.parseInt(nk[0]);        int k = Integer.parseInt(nk[1]);        int[] arr = new int[n];        String[] arrItems = scanner.nextLine().split(" ");        for (int i = 0; i < n; i++) {            int arrItem = Integer.parseInt(arrItems[i]);            arr[i] = arrItem;        }        int result = optimizePairs(k, arr);        System.out.println(result);        scanner.close();    }}